{
  "_from": "cwebp",
  "_id": "cwebp@2.0.2",
  "_inBundle": false,
  "_integrity": "sha1-twkZuWmDfGhoj1FynA+nTi85pvk=",
  "_location": "/cwebp",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cwebp",
    "fetchSpec": "latest",
    "name": "cwebp",
    "raw": "cwebp",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/cwebp/-/cwebp-2.0.2.tgz",
  "_shasum": "b70919b969837c68688f51729c0fa74e2f39a6f9",
  "_spec": "cwebp",
  "_where": "C:\\PseudoDrive\\Sproj\\Proxy",
  "author": {
    "email": "lbeschastny@iknow.travel",
    "name": "Leonid Beschastny"
  },
  "bugs": {
    "url": "https://github.com/Intervox/node-webp/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "raw-body": "2",
    "through": "~2.3",
    "when": "3"
  },
  "deprecated": false,
  "description": "node.js wrapper for cwebp and dwebp binaries from WebP image processing utility",
  "devDependencies": {
    "coffee-script": "^1.10.0",
    "minimist": "^1.2.0",
    "mocha": "^3.5.0",
    "mock-spawn": "^0.2.5",
    "should": "^12.0.0",
    "stream-buffers": "2.1.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/Intervox/node-webp#readme",
  "keywords": [
    "compress",
    "image",
    "img",
    "minify",
    "optimize",
    "webp"
  ],
  "main": "lib/index.js",
  "name": "cwebp",
  "optionalDependencies": {},
  "readme": "[<img src=\"https://developers.google.com/speed/webp/images/webplogo.png\" alt=\"WebP logo\" align=\"right\" />][webp]\n\n  [webp]: https://developers.google.com/speed/webp/\n\n[![NPM Package][repo_badge]][repo]\n[![Linux Build Status][travis_badge]][travis]\n[![Windows Build Status][appveyor_badge]][appveyor]\n[![Dependency Status][david_badge]][david]\n\n  [repo_badge]: https://img.shields.io/npm/v/cwebp.svg\n  [travis_badge]: https://img.shields.io/travis/Intervox/node-webp/latest.svg?label=linux%20build\n  [appveyor_badge]: https://img.shields.io/appveyor/ci/lbeschastny/node-webp/latest.svg?label=windows%20build\n  [david_badge]: https://img.shields.io/david/Intervox/node-webp/latest.svg?label=deps\n  [repo]: https://www.npmjs.com/package/cwebp\n  [travis]: https://travis-ci.org/Intervox/node-webp\n  [david]: https://david-dm.org/Intervox/node-webp/latest\n  [appveyor]: https://ci.appveyor.com/project/lbeschastny/node-webp\n\nnode-webp\n=========\n\nNode.js wrapper for [cwebp][cwebp] and [dwebp][dwebp] binaries\nfrom [WebP][webp] image processing utility.\n\n  [cwebp]: https://developers.google.com/speed/webp/docs/cwebp\n  [dwebp]: https://developers.google.com/speed/webp/docs/dwebp\n\n## Installation\n\n    npm install cwebp\n\n### Getting latest version of [WebP][webp]\n\nYou can get latest WebP source, pre-compiled binaries and installation instructions\nfrom its [official website][get_webp.1], or from its [downloads repository][get_webp.2].\n\nLinux users may use [this installation script][get_webp.3]\nto automatically download and install latest WebP binaries:\n\n    curl -s https://raw.githubusercontent.com/Intervox/node-webp/latest/bin/install_webp | sudo bash\n\nMacOS users may install WebP using [MacPorts][macports]:\n\n    sudo port selfupdate\n    sudo port install webp\n\nIf none of it suit your needs, you may [build the WebP utilities yourself][get_webp.5].\n\n### Alternative ways to install [WebP][webp]\n\nMacOS users may install webp `0.5.0` using [homebrew][homebrew]:\n\n    brew install webp\n\nYou may also [install webp `0.3.x` as npm module][get_webp.4]:\n\n    npm install webp\n\n  [get_webp.1]: https://developers.google.com/speed/webp/download\n  [get_webp.2]: http://downloads.webmproject.org/releases/webp/index.html\n  [get_webp.3]: https://raw.githubusercontent.com/Intervox/node-webp/latest/bin/install_webp\n  [get_webp.4]: https://www.npmjs.org/package/webp\n  [get_webp.5]: https://developers.google.com/speed/webp/docs/compiling\n  [macports]: http://guide.macports.org/\n  [homebrew]: http://brew.sh/\n\n## WebP versions compatibility\n\n| `node-webp` version  | Fully compatible WebP versions | Partially compatible WebP versions |\n| -------------------- | ------------------------------ | ---------------------------------- |\n| `0.1.x`              | all versions                   | all versions                       |\n| `1.x`                | `0.4.1` and later              | all versions                       |\n| `2.x`                | `0.5.0` and later              | all versions                       |\n\n## Usage\n\n```js\nvar CWebp = require('cwebp').CWebp;\nvar DWebp = require('cwebp').DWebp;\n\nvar encoder = new CWebp(source_image);\nvar decoder = new DWebp(source_webp);\n```\n\nor\n\n```js\n// new is optional\nvar encoder = CWebp(source_image);\nvar decoder = DWebp(source_webp);\n```\n\nor\n\n```js\n// Backward-compatibility with cwebp@0.1.x\nvar CWebp = require('cwebp');\n```\n\n### Specifying path to cwebp binary\n\nBy default `node-webp` looks for `cwebp` and `dwebp` binary in your `$PATH`.\n\n#### Specifying path as a constructor option\n\n```js\nvar Webp = require('cwebp');\nvar binPath = require('webp').cwebp;\n\nvar webp = new Webp(source, binPath);\n```\n\n#### Changing default behaviour\n\n```js\nvar CWebp = require('cwebp').CWebp;\nCWebp.bin = require('webp').cwebp;\n\nvar encoder = new CWebp(source);\n```\n\n```js\nvar DWebp = require('cwebp').DWebp;\nDWebp.bin = require('webp').dwebp;\n\nvar decoder = new DWebp(source);\n```\n\n**N.B.:** `webp` npm module provide old `webp 0.3.x` binaries.\n\n### Available source types\n\nWhen source is a string `node-webp` treats it as a file path.\n\n```js\nvar CWebp = require('cwebp').CWebp;\nvar DWebp = require('cwebp').DWebp;\n\nvar encoder = new CWebp('original.jpeg');\nvar decoder = new DWebp('converted.webp');\n```\n\nIt also accepts Buffers and Streams.\n\n```js\nvar encoder = new CWebp(buffer);\n```\n\n```js\nvar decoder = new DWebp(stream);\n```\n\nNote that `node-webp` will start listening to the data in a source stream\nonly when `.write()`, `.stream()` or `.toBuffer()` is called.\n\n### Encoding and decodind WebP images\n\n```js\nencoder.write('image.webp', function(err) {\n    console.log(err || 'encoded successfully');\n});\n```\n\n```js\ndecoder.write('image.png', function(err) {\n    console.log(err || 'decoded successfully');\n});\n```\n\n#### Getting output image as a Buffer\n\n```js\ndecoder.toBuffer(function(err, buffer) {\n    // ...\n});\n```\n\n#### Getting output image as a readable Stream\n\n```js\nvar stream = encoder.stream();\n\nstream.pipe(destination);\nstream.on('error', function(err) {\n  // something bad happened\n});\n```\n\n### Using promises\n\n`node-webp` supports A+ promises.\n\n```js\nencoder.write('image.webp').then(function() {\n    // ...\n});\n```\n\n```js\nencoder.toBuffer().then(function(buffer) {\n    // ...\n});\n```\n\n```js\ndecoder.stream().then(function(stream) {\n    // ...\n});\n```\n\n`node-webp` uses [when.js][when] library.\n\n  [when]: https://github.com/cujojs/when\n\n### Specifying conversion options\n\n`node-webp` provides helper functions for most of `cwebp` and `dwebp` conversion options.\nFor the full list of available helpers see [methods.json][methods] file.\n\n```js\nencoder.quality(60);\ndecoder.tiff();\n```\n\n  [methods]: https://github.com/Intervox/node-webp/blob/latest/methods.json\n\n#### Sending raw command\n\n```js\nencoder.command('-d', 'dump.pgm');\n```\n\n## [Changelog][history]\n\n  [history]: https://github.com/Intervox/node-webp/blob/latest/History.md\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Intervox/node-webp.git"
  },
  "scripts": {
    "clean": "rm -rf lib/ cwebp-*.tgz",
    "list-files": "tar -tzf `npm pack | tail -n 1`",
    "postpublish": "git push origin +HEAD:latest --follow-tags",
    "prepublish": "npm run clean && coffee -o lib/ -cb src/",
    "test": "mocha test/*.coffee"
  },
  "version": "2.0.2"
}
